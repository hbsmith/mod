#ifndef MOD_CONFIG_H
#define MOD_CONFIG_H

// rst: .. _libmod-config:
// rst:
// rst: This file defines configuration options for the library, e.g., for
// rst: changing the number of threads available for the ILP solver, or for
// rst: completely switching to another ILP solver.
// rst: Many of the options control verbosity of algorithms or which data to
// rst: output when printing figures.
// rst: 

#include <boost/preprocessor/expand.hpp>
#include <boost/preprocessor/seq/enum.hpp>
#include <boost/preprocessor/seq/for_each.hpp>
#include <boost/preprocessor/seq/for_each_i.hpp>
#include <boost/preprocessor/seq/transform.hpp>
#include <boost/preprocessor/tuple/elem.hpp>

#include <limits>
#include <string>

namespace mod {
class Config;

// rst: .. enum-struct:: LabelType
// rst:
// rst:		Selector for which type of label to use in algorithms.
// rst:

enum struct LabelType {
	// rst:		.. enumerator:: String
	// rst:
	// rst:			Vertices and edges are considered to be labelled with
	// rst:			character strings. If only first-order terms are present,
	// rst:			then strings are generated as a serialisation of the term.
	String,
	// rst:		.. enumerator:: Term
	// rst:
	// rst:			Vertices and edges are considered to be labelled with
	// rst:			first-order terms. If only strings are present, then first-order
	// rst:			terms are generated by parsing the strings. This may result
	// rst:			in an :cpp:class:`TermParsingError` if a string can not be parsed.
	Term
};

std::ostream &operator<<(std::ostream &s, const LabelType &lt);

// rst: .. enum-struct:: LabelRelation
// rst:
// rst:		Selector for which type of labelled morphism to use in an algorithm.
// rst:

enum class LabelRelation {
	// rst:		.. enumerator:: Isomorphism
	// rst:
	// rst:			Strings are considered isomorphic when they are equal.
	// rst:			Terms are considered isomorphic when their most general unifier
	// rst:			is a renaming.
	Isomorphism,
	// rst:		.. enumerator:: Specialisation
	// rst:
	// rst:			A term :math:`t_2` is more special than, or isomorphic to, a term :math:`t_1` if there is a substitution
	// rst:			which can be applied to :math:`t_1` to make the terms equal.
	// rst:			This relation means that the right-hand side of a comparison is the more specialised term.
	Specialisation,
	// rst:		.. enumerator:: Unification
	// rst:
	// rst:			Strings unify if they are equal, i.e., the same as with :cpp:any:`Isomorphism`.
	// rst:			Terms unify if a most general unifier (MGU) exists. The found MGU
	// rst:			is used for substitution in some algorithms.
	Unification
};

// rst: .. class:: LabelSettings
// rst:
// rst:		A class simply for grouping label settings.
// rst:

struct LabelSettings {
	// rst: 	.. function:: LabelSettings(LabelType type, LabelRelation relation)
	// rst:
	// rst:		Construct label settings that only uses the vertex and edge labels.

	LabelSettings(LabelType type, LabelRelation relation) : LabelSettings(type, relation, false, LabelRelation::Isomorphism) { }

	// rst: 	.. function:: LabelSettings(LabelType type, LabelRelation relation, LabelRelation stereoRelation)
	// rst:
	// rst:		Construct label settings that include both vertex and edge labels, and stereo information.

	LabelSettings(LabelType type, LabelRelation relation, LabelRelation stereoRelation) : LabelSettings(type, relation, true, stereoRelation) { }

	// rst: 	.. function:: LabelSettings(LabelType type, LabelRelation relation, bool withStereo, LabelRelation stereoRelation)

	LabelSettings(LabelType type, LabelRelation relation, bool withStereo, LabelRelation stereoRelation)
	: type(type), relation(relation), withStereo(withStereo), stereoRelation(stereoRelation) { }

	friend std::ostream &operator<<(std::ostream &s, const LabelSettings &ls);
public:
	// rst:		.. member:: LabelType type
	LabelType type;
	// rst:		.. member:: LabelRelation relation
	LabelRelation relation;
	// rst:		.. member:: bool withStereo
	bool withStereo;
	// rst:		.. member:: LabelRelation stereoRelation
	LabelRelation stereoRelation;
};

// rst: .. function:: Config &getConfig()
// rst: 
// rst:		:returns: the singleton :cpp:class:`Config` instance used by the library.
// rst:
Config &getConfig();

// rst-class: template<typename T> ConfigSetting
// rst: 
// rst:		Holds a single option of type :cpp:any:`T`.
// rst-class-start:

template<typename T>
struct ConfigSetting {

	ConfigSetting(T value, const std::string &name) : value(value), name(name) { }

	// rst: .. function:: void set(T value)
	// rst:
	// rst:		Sets the configuration value.
	// rst:

	void set(T value) {
		this->value = value;
	};

	// rst: .. function:: T get() const
	// rst:
	// rst:		:returns: The configuration value.
	// rst:

	T get() const {
		return value;
	}

	// rst: .. function: T &operator()()
	// rst:
	// rst:		Access the value.
	// rst:

	T &operator()() {
		return value;
	}

	const std::string &getName() const {
		return name;
	}
private:
	T value;
	const std::string name;
};
// rst-class-end:

// rst-class: Config
// rst:
// rst:		Holds all configuration settings.
// rst:
// rst-class-end:

struct Config {

	enum class IsomorphismAlg {
		VF2, Canon, SmilesCanonVF2
	};

	Config() = default;
	Config(const Config&) = delete;
	Config &operator=(const Config&) = delete;
	Config(Config&&) = delete;
	Config &operator=(Config&&) = delete;

	// BOOST_PP_SEQ(
	//	BOOST_PP_TUPLE(NamespaceClass, NamespaceName, 
	//		BOOST_PP_SEQ(
	//			BOOST_PP_TUPLE(Type, Name, DefaultValue)
	//		)
	//	)
	// )

#define MOD_CONFIG_DATA_NS_SIZE() 3
#define MOD_CONFIG_DATA_SETTING_SIZE() 3
#define MOD_CONFIG_DATA()                                                       \
	/* rst: .. todo:: write documentation for all settings */                     \
	((Canon, canon,                                                               \
		((bool, printStats, false))                                                 \
	))                                                                            \
	((Common, common,                                                             \
		((bool, quiet, false))                                                      \
		((unsigned int, numThreads, 1))                                             \
	))                                                                            \
	((ComponentSG, componentSG,                                                   \
		((bool, verbose, false))                                                    \
	))                                                                            \
	((DG, dg,                                                                     \
		((bool, skipInitialGraphIsomorphismCheck, false))                           \
		((bool, calculateVerbose, false))                                           \
		((bool, calculateVerbosePrint, false))                                      \
		((bool, calculateDetailsVerbose, false))                                    \
		((bool, calculatePredicatesVerbose, false))                                 \
		((bool, listUniverse, false))                                               \
		((unsigned int, printGraphProduction, std::numeric_limits<unsigned int>::max())) \
		((unsigned int, productLimit, std::numeric_limits<unsigned int>::max()))    \
		((bool, onlyProduceMolecules, false))                                       \
		((bool, putAllProductsInSubset, false))                                     \
		((bool, printVerticesAsPoints, false))                                      \
		((bool, dryDerivationPrinting, false))                                      \
		((bool, derivationDebugOutput, false))                                      \
		((bool, ignoreSubset, false))                                               \
		((bool, disableRepeatFixedPointCheck, false))                               \
		((bool, useDotCoords, false))                                               \
		((std::string, graphvizCoordsBegin, ""))                                    \
		((std::string, tikzPictureOption, "scale=\\modDGHyperScale"))               \
		((bool, disallowEmptyParallelStrategies, true))                             \
		((bool, printVertexIds, false))                                             \
		((bool, printNonHyper, false))                                              \
	))                                                                            \
	((Graph, graph,                                                               \
		((bool, ignoreStereoInSmiles, false))                                       \
		((bool, verboseCache, false))                                               \
		((bool, printSmilesParsingWarnings, true))                                  \
		((bool, appendSmilesClass, false))                                          \
		((mod::Config::IsomorphismAlg, isomorphismAlg, mod::Config::IsomorphismAlg::VF2)) \
		((bool, useWrongSmilesCanonAlg, false))                                     \
		((unsigned long, numIsomorphismCalls, 0))                                   \
	))                                                                            \
	((IO, io,                                                                     \
		((std::string, dotCoordOptions, ""))                                        \
		((bool, useOpenBabelCoords, true))                                          \
	))                                                                            \
	((OBabel, obabel,                                                             \
		((bool, verbose, false))                                                    \
	))                                                                            \
	((Rule, rule,                                                                 \
		((bool, ignoreConstraintsDuringInversion, false))                           \
		((std::string, changeColour, ""))                                           \
		((std::string, changeColourL, "NavyBlue"))                                  \
		((std::string, changeColourK, "Purple"))                                    \
		((std::string, changeColourR, "Green"))                                     \
		((bool, printChangedEdgesInContext, false))                                 \
		((bool, printCombined, true))                                               \
		((bool, collapseChangedHydrogens, false))                                   \
	))                                                                            \
	((RC, rc,                                                                     \
		((bool, verbose, false))                                                    \
		((bool, composeConstraints, true))                                          \
		((bool, printMatches, false))                                               \
		((bool, matchesWithIndex, false))                                           \
	))                                                                            \
	((Stereo, stereo,                                                             \
		((bool, silenceDeductionWarnings, false))                                   \
	))                                                                            \
	((Term, unification,                                                          \
		((bool, verboseMGU, false))                                                 \
	))

#define MOD_CONFIG_nsIter(rNS, dataNS, tNS)                                       \
	struct BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 0, tNS) {                 \
		using Self = BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 0, tNS);          \
		BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 0, tNS)(const Self&) = delete; \
		Self &operator=(const Self&) = delete;                                        \
		BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 0, tNS)(Self&&) = delete;      \
		Self &operator=(Self&&) = delete;                                             \
		inline BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 0, tNS)() :             \
		BOOST_PP_SEQ_ENUM(BOOST_PP_SEQ_TRANSFORM(MOD_CONFIG_settingIterCons,          \
			BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 0, tNS),                     \
			BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 2, tNS))                     \
		) {}                                                                          \
		BOOST_PP_SEQ_FOR_EACH_I(MOD_CONFIG_settingIter,                               \
			BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 0, tNS),                     \
			BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 2, tNS))                     \
	} BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_NS_SIZE(), 1, tNS);

#define MOD_CONFIG_settingIterCons(rSettting, dataSetting, tSetting)                                \
	BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_SETTING_SIZE(), 1, tSetting)(                                 \
		BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_SETTING_SIZE(), 2, tSetting),                               \
		MOD_toString(dataSetting) "::"                                                                  \
		MOD_toString(BOOST_PP_EXPAND(BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_SETTING_SIZE(), 1, tSetting))) \
	)

#define MOD_CONFIG_settingIter(rSettting, dataSetting, nSetting, tSetting)        \
	ConfigSetting<BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_SETTING_SIZE(), 0, tSetting)> \
		BOOST_PP_TUPLE_ELEM(MOD_CONFIG_DATA_SETTING_SIZE(), 1, tSetting);

#define MOD_toString(s) MOD_toString1(s)
#define MOD_toString1(s) #s

	BOOST_PP_SEQ_FOR_EACH(MOD_CONFIG_nsIter, ~, MOD_CONFIG_DATA())

#undef MOD_CONFIG_settingIterCons
#undef MOD_CONFIG_settingIter
#undef MOD_CONFIG_nsIter
};

} // namespace mod

#endif /* MOD_CONFIG_H */
