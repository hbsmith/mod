.. _cpp-dg/DG:

**********************************************************
dg/DG.h
**********************************************************
.. default-domain:: cpp

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``dg::DG``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: dg::DG
    

    The main derivation graph class. A derivation graph is a directed hypergraph
    :math:`\mathcal{H} = (V, E)`.
    Each vertex is annotated with a graph, and each hyperedge is annotated with a transformation rule.
    A derivation graph can either be calculated from a strategy or loaded from external data.


Synopsis
^^^^^^^^

.. code-block:: c++
    
    struct DG {
        DG(const DG&) = delete;
        DG &operator=(const DG&) = delete;
    public:
        class Vertex;
        class HyperEdge;
        class VertexIterator;
        class VertexRange;
        class EdgeIterator;
        class EdgeRange;
        class InEdgeIterator;
        class InEdgeRange;
        class OutEdgeIterator;
        class OutEdgeRange;
        class SourceIterator;
        class SourceRange;
        class TargetIterator;
        class TargetRange;
        class RuleIterator;
        class RuleRange;
    private:
        DG(std::unique_ptr<lib::DG::NonHyper> dg);
    public:
        ~DG();
        std::size_t getId() const;
        friend std::ostream &operator<<(std::ostream &s, const DG &dg);
        const lib::DG::NonHyper &getNonHyper() const;
        const lib::DG::Hyper &getHyper() const;
    public: // hypergraph interface
        std::size_t numVertices() const;
        VertexRange vertices() const;
        std::size_t numEdges() const;
        EdgeRange edges() const;
    public: // searching for vertices and hyperedges
        Vertex findVertex(std::shared_ptr<graph::Graph> g) const;
        HyperEdge findEdge(const std::vector<Vertex> &sources, const std::vector<Vertex> &targets) const;
        HyperEdge findEdge(const std::vector<std::shared_ptr<graph::Graph> > &sources, const std::vector<std::shared_ptr<graph::Graph> > &targets) const;
    public:
        void calc();
        const std::set<std::shared_ptr<graph::Graph>, graph::GraphLess> &getGraphDatabase() const;
        const std::vector<std::shared_ptr<graph::Graph> > &getProducts() const;
        std::string print(const PrintData &data, const Printer &printer) const;
        std::string dump() const;
        void list() const;
        void listStats() const;
        // :throws: :class:`LogicError` if the DG has not been calculated or if the DG is not created from strategies.
        std::vector<std::shared_ptr<graph::Graph> > getStratOutputSubset() const;
    private:
        struct Pimpl;
        std::unique_ptr<Pimpl> p;
    public:
        static std::shared_ptr<DG> derivations(const std::vector<Derivation> &derivations);
        static std::shared_ptr<DG> abstract(const std::string &specification);
        static std::shared_ptr<DG> ruleComp(const std::vector<std::shared_ptr<graph::Graph> > &graphs,
                std::shared_ptr<Strategy> strategy, LabelSettings labelSettings, bool ignoreRuleLabelTypes);
        static std::shared_ptr<DG> dumpImport(const std::vector<std::shared_ptr<graph::Graph> > &graphs, const std::vector<std::shared_ptr<rule::Rule> > &rules, const std::string &file);
        static void diff(std::shared_ptr<DG> dg1, std::shared_ptr<DG> dg2);
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: dg::DG

.. function:: std::size_t getId() const

    :returns: the instance identifier for the object.
.. function:: const lib::DG::NonHyper &getNonHyper() const
              const lib::DG::Hyper &getHyper() const

    :returns: the internal data structures of the derivation graph.
.. function:: std::size_t numVertices() const

    :returns: the number of vertices in the derivation graph.
    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: VertexRange vertices() const

    :returns: a range of all vertices in the derivation graph.
    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: std::size_t numEdges() const

    :returns: the number of edges in the derivation graph.
    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: EdgeRange edges() const

    :returns: a range of all edges in the derivation graph.
    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: Vertex findVertex(std::shared_ptr<graph::Graph> g) const

    :returns: a vertex descriptor for which the given graph is associated,
        or a null descriptor if no such vertex exists.
.. function:: HyperEdge findEdge(const std::vector<Vertex> &sources, const std::vector<Vertex> &targets) const
              HyperEdge findEdge(const std::vector<std::shared_ptr<graph::Graph> > &sources, const std::vector<std::shared_ptr<graph::Graph> > &targets) const

    :returns: a hyperedge with the given sources and targets.
      If no such hyperedge exists in the derivation graph then a null edge is returned.
      In the second version, the graphs are put through :func:`findVertex` first.
    :throws: :class:`LogicError` if a vertex descriptor is null, or does not belong to the derivation graph.
.. function:: void calc()

    Compute the derivation graph.

    :throws: :class:`LogicError` if created from :cpp:any:`ruleComp` and a dynamic add strategy adds a graph
        isomorphic to an already known graph, but represented by a different object.
.. function:: const std::set<std::shared_ptr<graph::Graph>, graph::GraphLess> &getGraphDatabase() const

    :returns: the set of all graphs created by the derivation graph,
        and all graphs given when constructed.
.. function:: const std::vector<std::shared_ptr<graph::Graph> > &getProducts() const

    :returns: the list of new graphs discovered by the derivation graph.
.. function:: std::string print(const PrintData &data, const Printer &printer) const

    Print the derivation graph in style of a hypergraph.

    :returns: the name of the PDF-file that will be compiled in post-processing.
    :throws: :class:`LogicError` if the print data is not for this DG.
.. function:: std::string dump() const

    Exports the derivation graph to a text file, which can be importetet.

    :returns: the name of the file with the exported data.
    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: void list() const

    Output information on the calculation of the derivation graph.
    For strategy-based calculations, this outputs the expression tree.
.. function:: void listStats() const

    Output various stats of the derivation graph.

    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: static std::shared_ptr<DG> derivations(const std::vector<Derivation> &derivations)

    Create a derivation graph from a list of :class:`Derivation`.
.. function:: static std::shared_ptr<DG> abstract(const std::string &specification)

    Create a derivation graph from an abstract description according to the following grammar.

    .. productionlist::
        description: `derivation` { `derivation` }
        derivation: `side` ("->" | "<=>") `side`
         side: `term` { "+" `term` }
        term: [ `unsignedInt` ] `identifier`

    :throws: :class:`InputError` on bad input.
.. function:: static std::shared_ptr<DG> ruleComp(const std::vector<std::shared_ptr<graph::Graph> > &graphs, \
              std::shared_ptr<Strategy> strategy, LabelSettings labelSettings, bool ignoreRuleLabelTypes)

    Initialize a derivation graph with a :cpp:class:`Strategy` and an initial graph database.
    Any derived graph isomorphic to a given graph is replaced by the given graph.
    The given :cpp:class:`LabelSettings` is used for both monomorphism enumeration,
    and its :cpp:enum:`LabelType` is used in isomorphism checks.

    :throws: :class:`LogicError` if two graphs in :cpp:any:`graphs` are different by isomorphic objects,
        or similarly if a static add strategy adds an isomorphic graph.
    :throws: :class:`LogicError` if :cpp:any:`ignoreRuleLabelTypes` is `false` and a rule in the given strategy
        has an intended label type different from the given type in :cpp:any:`labelSettings`.
.. function:: static std::shared_ptr<DG> dumpImport(const std::vector<std::shared_ptr<graph::Graph> > &graphs, const std::vector<std::shared_ptr<rule::Rule> > &rules, const std::string &file)

    Load a derivation graph dump. Any graph in the dump which is isomorphic to a given graph is replaced by the given graph.
    The same procedure is done for the rules, however only using the name of the rule for comparison.

    :throws: :class:`InputError` on bad input.
.. function:: static void diff(std::shared_ptr<DG> dg1, std::shared_ptr<DG> dg2)

    Compare two derivation graphs and lists the difference.
    This is not a general isomorphism check; two vertices are equal if they have
    the same graph attached. Edges are equal if the head and tail sets are equal
    and if the attached rule is the same.

.. cpp:namespace:: mod

