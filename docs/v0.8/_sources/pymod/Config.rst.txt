.. _py-Config:

**********************************************************
Config
**********************************************************
.. default-domain:: py

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``LabelType``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: LabelType

    Selector for which type of label to use in algorithms.

    .. py:attribute:: String

        Vertices and edges are considered to be labelled with
        character strings. If only first-order terms are present,
        then strings are generated as a serialisation of the term.

    .. py:attribute:: Term

        Vertices and edges are considered to be labelled with
        first-order terms. If only strings are present, then first-order
        terms are generated by parsing the strings. This may result
        in an :py:class:`TermParsingError` if a string can not be parsed.

Class ``LabelRelation``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: LabelRelation

    Selector for which type of labelled morphism to use in an algorithm.
    For strings they are all defined to be equivalent to string equality.

    .. py:attribute:: Isomorphism

        Terms are considered isomorphic when their most general unifier
        is a renaming.
    .. py:attribute:: Specialisation

        A term :math:`t_2` is more special than, or isomorphic to, a term :math:`t_1` if there is a substitution
        which can be applied to :math: `t_1` to make the terms equal.
        This relation means that the right-hand side of a comparison is the more specialised term.
    .. py:attribute:: Unification

        Terms unify if a most general unifier (MGU) exists. The found MGU
        is used for substitution in some algorithms.

Class ``LabelSettings``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: LabelSettings

    A group label settings commonly used together in algorithms.

    .. py:method:: __init__(self, type, relation)

        Construct label settings that only uses the vertex and edge labels.

        :param type: How to interpret labels.
        :type type: :py:class:`LabelType`
        :param relation: The relation that should hold in morphisms between two labels.
        :type relation: :py:class:`LabelRelation`
    .. py:method:: __init__(self, type, relation, stereoRelation)

        Construct label settings that include both vertex and edge labels, and stereo information.

        :param type: How to interpret labels.
        :type type: :py:class:`LabelType`
        :param relation: The relation that should hold in morphisms between two labels.
        :type relation: :py:class:`LabelRelation`
        :param stereoRelation: The relation that should hold in morphisms between stereo data.
        :type stereoRelation: :py:class:`LabelRelation`
    .. py:method:: __init__(self, type, relation, withStereo, stereoRelation)

        Construct label settings that includes vertex and edge labels, and stereo information depending on the given flag.

        :param type: How to interpret labels.
        :type type: :py:class:`LabelType`
        :param relation: The relation that should hold in morphisms between two labels.
        :type relation: :py:class:`LabelRelation`
        :param withStereo: A flag to specify if stereo information should be included.
        :type withStereo: bool
        :param stereoRelation: The relation that should hold in morphisms between stereo data.
        :type stereoRelation: :py:class:`LabelRelation`
    .. py:attribute:: type

        :type: :py:class:`LabelType`
    .. py:attribute:: relation

        :type: :py:class:`LabelRelation`
    .. py:attribute:: withStereo

        :type: bool
    .. py:attribute:: stereoRelation

        :type: :py:class:`LabelRelation`

Class ``Config``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: Config

    This class contains a range of inner classes of config settings. See :doc:`the libMÃ˜D documentation</libmod/Config>`.
.. py:data:: config

    This variable is initialised to the return value of :py:func:`getConfig`, i.e., just use this instead of the method.

.. py:method:: getConfig()

    :returns: the singleton :cpp:class:`Config` instance used by the library.
